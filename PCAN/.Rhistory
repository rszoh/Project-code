out$A=rbind(out$A,as.vector(A))
out$B=rbind(out$B,as.vector(B))
tet <- adap_rej(A,X,Z,sigte,mute)
out$tet=rbind(out$tet,as.vector(tet))
lamb <- adap_rej(B,Y,Z,siglb,mulb)
out$lamb=rbind(out$lamb,as.vector(lamb))
#cp <- cp+1
#if(cp > 100) {break}
}
traceback()
i
traceback()
exp(-20)
exp(20)
tauj <-function(al0,bet0,A,B) ### j: the column of A
{
#J <-ncol(A)
#val <-numeric(J)
#for(j in 1:J)
#{
maj <- sum( (1:nrow(A)) > j)
mbj <- sum( (1:nrow(B)) > j)
aln <-.5*(maj+mbj) + al0
betn <- (1/bet0) + .5*(sum(A[,j]^2) + sum(B[,j]^2))
val <-rgamma(n=1,shape=aln,scale=1/betn)
#}
return(val)
}
apply()
apply(matrix(1:ncol(A),ncol=1),1,tauj,al0=al0,bet0=bet0,A=A,B=B)
tauj <-function(al0,bet0,A,B) ### j: the column of A
{
#J <-ncol(A)
#val <-numeric(J)
#for(j in 1:J)
#{
maj <- sum( (1:nrow(A)) > j)
mbj <- sum( (1:nrow(B)) > j)
aln <-.5*(maj+mbj) + al0
betn <- (1/bet0) + .5*(sum(A[,j]^2) + sum(B[,j]^2))
val <-rgamma(n=1,shape=aln,scale=1/betn)
#}
return(val)
}
apply(matrix(1:ncol(A),ncol=1),1,tauj,al0=al0,bet0=bet0,A=A,B=B)
tracebacK()
traceback()
tauj <-function(al0,bet0,A,B,j) ### j: the column of A
{
#J <-ncol(A)
#val <-numeric(J)
#for(j in 1:J)
#{
maj <- sum( (1:nrow(A)) > j)
mbj <- sum( (1:nrow(B)) > j)
aln <-.5*(maj+mbj) + al0
betn <- (1/bet0) + .5*(sum(A[,j]^2) + sum(B[,j]^2))
val <-rgamma(n=1,shape=aln,scale=1/betn)
#}
return(val)
}
apply(matrix(1:ncol(A),ncol=1),1,tauj,al0=al0,bet0=bet0,A=A,B=B)
sigtej <-function(nu0,S0,A,Z,tet,mute,j) ## tet is a n*p matrix ,Z is a d*n matrix
{
p <-ncol(tet)
n <- nrow(tet)
#val <-numeric(p)
#for(j in 1:p)
#{
scl <- (nu0*S0 + sum( (tet[,j] - t(Z)%*%matrix(A[j,],ncol=1)-mute[j])^2))
val <- scl / rchisq(n=1,df=n+nu0)
#}
return(val)
}
apply(matrix(1:ncol(tet),ncol=1),1,sigtej,nu0=nu0,S0=S0,A=A,B=B,Z=Z,tet=tet,mute=mute)
sigtej <-function(nu0,S0,A,Z,tet,mute,j) ## tet is a n*p matrix ,Z is a d*n matrix
{
p <-ncol(tet)
n <- nrow(tet)
#val <-numeric(p)
#for(j in 1:p)
#{
scl <- (nu0*S0 + sum( (tet[,j] - t(Z)%*%matrix(A[j,],ncol=1)-mute[j])^2))
val <- scl / rchisq(n=1,df=n+nu0)
#}
return(val)
}
apply(matrix(1:ncol(tet),ncol=1),1,sigtej,nu0=nu0,S0=S0,A=A,B=B,Z=Z,tet=tet,mute=mute)
dim(tet)
nu0
S0
A
B
dim(Z)
dim(tet)
apply(matrix(1:ncol(tet),ncol=1),1,sigtej,nu0=nu0,S0=S0,A=A,B=B,Z=Z,tet=tet,mute=mute)
apply(matrix(1:ncol(tet),ncol=1),1,sigtej,nu0=nu0,S0=S0,A=A,Z=Z,tet=tet,mute=mute)
tet
mutej <-function(sigte,sigte0,A,Z,tet,j) ## j=1, ...,p
{
n=nrow(tet)
p<-ncol(tet)
val <-numeric(p)
#for(j in 1:p)
#{
sig <- ((n/sigte[j]) + (1/sigte0))^(-1)
mn <- (1/sigte[j])*sig*sum(tet[,j] - t(Z)%*%matrix(A[j,],ncol=1))
val <-rnorm(n=1,mean=mn,sd=sqrt(sig))
#}
return(val)
}
apply(matrix(1:ncol(tet),ncol=1),1,mutej,sigte=sigte,sigte0=sigte0,A=A,Z=Z,tet=tet)
mulbl <-function(siglb,siglb0,A,Z,lamb,l) ## l=1, ... ,q
{
n=nrow(lamb)
q <- ncol(lamb)
val <-numeric(q)
#for(l in 1:q)
#{
sig <- ((n/siglb[l]) + (1/siglb0))^(-1)
mn <- (1/siglb[l])*sig*sum(lamb[,l] - t(Z)%*%matrix(B[l,],ncol=1))
val<-rnorm(n=1,mean=mn,sd=sqrt(sig))
#}
return(val)
}
apply(matrix(1:ncol(lamb),ncol=1),1,mulblj,siglb=siglb,siglb0=siglb0,B=B,Z=Z,lamb=lamb)
mulbl <-function(siglb,siglb0,A,Z,lamb,l) ## l=1, ... ,q
{
n=nrow(lamb)
q <- ncol(lamb)
val <-numeric(q)
#for(l in 1:q)
#{
sig <- ((n/siglb[l]) + (1/siglb0))^(-1)
mn <- (1/siglb[l])*sig*sum(lamb[,l] - t(Z)%*%matrix(B[l,],ncol=1))
val<-rnorm(n=1,mean=mn,sd=sqrt(sig))
#}
return(val)
}
apply(matrix(1:ncol(lamb),ncol=1),1,mulbl,siglb=siglb,siglb0=siglb0,B=B,Z=Z,lamb=lamb)
mulbl <-function(siglb,siglb0,B,Z,lamb,l) ## l=1, ... ,q
{
n=nrow(lamb)
q <- ncol(lamb)
val <-numeric(q)
#for(l in 1:q)
#{
sig <- ((n/siglb[l]) + (1/siglb0))^(-1)
mn <- (1/siglb[l])*sig*sum(lamb[,l] - t(Z)%*%matrix(B[l,],ncol=1))
val<-rnorm(n=1,mean=mn,sd=sqrt(sig))
#}
return(val)
}
apply(matrix(1:ncol(lamb),ncol=1),1,mulbl,siglb=siglb,siglb0=siglb0,B=B,Z=Z,lamb=lamb)
apply(matrix(1:ncol(lamb),ncol=1),1,siglb,nu0=nu0,S0=S0,B=B,Z=Z,lamb=lamb,mulb=mulb)
apply(matrix(1:ncol(lamb),ncol=1),1,siglbj,nu0=nu0,S0=S0,B=B,Z=Z,lamb=lamb,mulb=mulb)
siglbj <-function(nu0,S0,B,Z,lamb,mulb,j) ## lamb is a n*q matrix ,Z is a d*n matrix
{
n <- nrow(lamb)
q <- ncol(lamb)
val <-numeric(q)
#for(j in 1:q)
#{
scl <- (nu0*S0 + sum( (lamb[,j] - t(Z)%*%matrix(B[j,],ncol=1)- mulb[j])^2))
val <- scl / rchisq(n=1,df=n+nu0)
#}
return(val)
}
apply(matrix(1:ncol(lamb),ncol=1),1,siglbj,nu0=nu0,S0=S0,B=B,Z=Z,lamb=lamb,mulb=mulb)
ajl <-function(sigte,mute,A,Z,tet,tau,id) ##j=1,...,p and l=1,...,d; Z is d*n matrix; id (j,l) vector
{
j=id[1]
l=id[2]
sig <- ((1/sigte[j])*sum(Z[l,]^2) + tau[l])^{-1}
mun <- (1/sigte[j])*sig*sum(tet[,j] - mute[j] - t(Z[-l,]%*%matrix(A[j,-l],ncol=1)))
if(j > l)
{val <-rnorm(n=1,mean=mun,sd=sqrt(sig))}
else if(j ==l)
{val <- rtruncnorm(n=1,a=0,meanmun,sd=sqrt(sig))}
else
{val <- 0}
return(val)
}
ajl(sigte,mute,A,Z,tet,tau,c(1,1))
ajl <-function(sigte,mute,A,Z,tet,tau,id) ##j=1,...,p and l=1,...,d; Z is d*n matrix; id (j,l) vector
{
j=id[1]
l=id[2]
sig <- ((1/sigte[j])*sum(Z[l,]^2) + tau[l])^{-1}
mun <- (1/sigte[j])*sig*sum(tet[,j] - mute[j] - t(Z[-l,]%*%matrix(A[j,-l],ncol=1)))
if(j > l)
{val <-rnorm(n=1,mean=mun,sd=sqrt(sig))}
else if(j ==l)
{val <- rtruncnorm(n=1,a=0,mean=mun,sd=sqrt(sig))}
else
{val <- 0}
return(val)
}
ajl(sigte,mute,A,Z,tet,tau,c(1,1))
ajl(sigte,mute,A,Z,tet,tau,c(1,2))
ajl(sigte,mute,A,Z,tet,tau,c(2,2))
ajl(sigte,mute,A,Z,tet,tau,c(2,1))
ajl(sigte,mute,A,Z,tet,tau,c(2,1))
ajl(sigte,mute,A,Z,tet,tau,c(2,1))
ajl(sigte,mute,A,Z,tet,tau,c(2,1))
?outer
rep(1:2,3)
rep(1:2,each=3)
ida <- matrix(cbind(rep(1:nrow(A),each=ncol(A)), rep(c(1:ncol(A)),nrow(A))),ncol=2)
apply(ida,1,ajl,sigte=sigte,mute=mute,A=A,Z=Z,tet=tet,tau=tau)
head(ida)
matrix(apply(ida,1,ajl,sigte=sigte,mute=mute,A=A,Z=Z,tet=tet,tau=tau),ncol=ncol(A),byrow=T)
bkl <-function(siglb,mulb,B,Z,lamb,tau,k,l) ##k=1,...,p and l=1,...,d; Z is d*n matrix
{
k<-id[1]
l<-id[2]
sig <- ((1/siglb[k])*sum(Z[l,]^2) + tau[l])^{-1}
mun <-(1/siglb[k])*sig*sum(lamb[,k] - mulb[k] - t(Z[-l,]%*%matrix(B[k,-l],ncol=1)))
if(k > l)
{val <-rnorm(n=1,mean=mun,sd=sqrt(sig))}
else if(k==l)
{val <- rtruncnorm(n=1,a=0,mean=mun,sd=sqrt(sig))}
else { val <- 0 }
return(val)
}
idb <- matrix(cbind(rep(1:nrow(B),each=ncol(B)), rep(c(1:ncol(B)),nrow(B))),ncol=2)
matrix(apply(idb,1,bkl,siglb=siglb,mulb=mulb,B=B,Z=Z,lamb=lamb,tau=tau),ncol=ncol(B),byrow=T)
bkl <-function(siglb,mulb,B,Z,lamb,tau,id) ##k=1,...,p and l=1,...,d; Z is d*n matrix
{
k<-id[1]
l<-id[2]
sig <- ((1/siglb[k])*sum(Z[l,]^2) + tau[l])^{-1}
mun <-(1/siglb[k])*sig*sum(lamb[,k] - mulb[k] - t(Z[-l,]%*%matrix(B[k,-l],ncol=1)))
if(k > l)
{val <-rnorm(n=1,mean=mun,sd=sqrt(sig))}
else if(k==l)
{val <- rtruncnorm(n=1,a=0,mean=mun,sd=sqrt(sig))}
else { val <- 0 }
return(val)
}
idb <- matrix(cbind(rep(1:nrow(B),each=ncol(B)), rep(c(1:ncol(B)),nrow(B))),ncol=2)
matrix(apply(idb,1,bkl,siglb=siglb,mulb=mulb,B=B,Z=Z,lamb=lamb,tau=tau),ncol=ncol(B),byrow=T)
Zi <-function(sigte,siglb,tet,lamb,A,B,mute,mulb,i)
{
sig = solve(diag(rep(1,ncol(A))) + t(A)%*%diag(1/sigte)%*%A + t(B)%*%diag(1/siglb)%*%B)
mn<-NULL
#for(i in 1:nrow(tet))
mn =as.vector((t(matrix(tet[i,] - mute,ncol=1))%*%diag(1/sigte)%*%A + t(matrix(lamb[i,] - mulb,ncol=1))%*%diag(1/siglb)%*%B)%*%sig))
val <- rmvnorm(n=1,mean=mn,sigma=sig)
return(val)
#return(rmvnorm(n=1,mean=as.vector(mn),sigma=sig))
}
apply(matrix(1:nrow(tet),ncol=1),1,Zi,sigte=sigte,siglb=siglb,tet=tet,lamb=lamb,tau=tau)
Zi <-function(sigte,siglb,tet,lamb,A,B,mute,mulb,i)
{
sig = solve(diag(rep(1,ncol(A))) + t(A)%*%diag(1/sigte)%*%A + t(B)%*%diag(1/siglb)%*%B)
mn<-NULL
#for(i in 1:nrow(tet))
mn =as.vector((t(matrix(tet[i,] - mute,ncol=1))%*%diag(1/sigte)%*%A + t(matrix(lamb[i,] - mulb,ncol=1))%*%diag(1/siglb)%*%B)%*%sig))
val <- rmvnorm(n=1,mean=mn,sigma=sig)
return(val)
#return(rmvnorm(n=1,mean=as.vector(mn),sigma=sig))
}
Zi <-function(sigte,siglb,tet,lamb,A,B,mute,mulb,i)
{
sig = solve(diag(rep(1,ncol(A))) + t(A)%*%diag(1/sigte)%*%A + t(B)%*%diag(1/siglb)%*%B)
mn<-NULL
#for(i in 1:nrow(tet))
mn =as.vector((t(matrix(tet[i,] - mute,ncol=1))%*%diag(1/sigte)%*%A + t(matrix(lamb[i,] - mulb,ncol=1))%*%diag(1/siglb)%*%B)%*%sig)
val <- rmvnorm(n=1,mean=mn,sigma=sig)
return(val)
#return(rmvnorm(n=1,mean=as.vector(mn),sigma=sig))
}
apply(matrix(1:nrow(tet),ncol=1),1,Zi,sigte=sigte,siglb=siglb,tet=tet,lamb=lamb,tau=tau)
apply(matrix(1:nrow(tet),ncol=1),1,Zi,sigte=sigte,siglb=siglb,tet=tet,lamb=lamb)
dim(A)
apply(matrix(1:nrow(tet),ncol=1),1,Zi,sigte=sigte,siglb=siglb,tet=tet,lamb=lamb,A=A,B=B)
apply(matrix(1:nrow(tet),ncol=1),1,Zi,sigte=sigte,siglb=siglb,tet=tet,lamb=lamb,A=A,B=B,mute=mute,mulb=mulb)
dim(apply(matrix(1:nrow(tet),ncol=1),1,Zi,sigte=sigte,siglb=siglb,tet=tet,lamb=lamb,A=A,B=B,mute=mute,mulb=mulb))
Z <- apply(matrix(1:nrow(tet),ncol=1),1,Zi,sigte=sigte,siglb=siglb,tet=tet,lamb=lamb,A=A,B=B,mute=mute,mulb=mulb)
out$Z <- rbind(out$Z,as.vector(Z))
tet <- adap_rej(A,X,Z,sigte,mute)
dim(tet)
tet[1,]
?crossprod
y <- arms(c(0,2), function(x) -crossprod(x)/2,
function(x) (min(x)>-5)*(max(x)<5), 500)
plot(y, main="Bivariate standard normal", asp=1)
arms(runif(nrow(An),-20,20),likhd,function(tet,...) (min(tet) >-20)*(max(tet)<20),n, Z=Z[,1],A=A,sig=sigte,X=X[1,],mu=mute)[n]
arms(runif(nrow(A),-20,20),likhd,function(tet,...) (min(tet) >-20)*(max(tet)<20),n, Z=Z[,1],A=A,sig=sigte,X=X[1,],mu=mute)[n]
arms(runif(nrow(A),-20,20),likhd,function(tet,...) (min(tet) >-20)*(max(tet)<20),n, Z=Z[,1],A=A,sig=sigte,X=X[1,],mu=mute)
dim(arms(runif(nrow(A),-20,20),likhd,function(tet,...) (min(tet) >-20)*(max(tet)<20),n, Z=Z[,1],A=A,sig=sigte,X=X[1,],mu=mute))
adap_rej<-function(An,Xn,Zn,sig_n,mu)
{
n=1
ot=matrix(0,ncol=nrow(An),nrow=nrow(Xn))
for(j in 1:nrow(Xn))
{
ot[j,] <- arms(runif(nrow(An),-20,20),likhd,function(tet,...) (min(tet) >-20)*(max(tet)<20),n, Z=Zn[,j],A=An,sig=sig_n,X=Xn[j,],mu=mu)[n,]
}
return(ot)
}
tet <- adap_rej(A,X,Z,sigte,mute)
likhd<-function(tet,Z,X,sig,A,mu) # Z(d*1) vector; tet(p*1) vector; X(p*1) vector, sig(p*1)vector; A(p*d),mu(p*1)
{
#gam_m<-diag(gam,nrow=length(gam))
sigm <- diag(sig)
res=-(1/2)*t(tet - (A%*%matrix(Z,ncol=1) + mu + X*sig))%*%diag(1/sig)%*%(tet - (A%*%Z + mu + X*sig)) - sum(exp(tet)) ### like lihood minus the exp(-exp(tet)) term
return(res)
}
tet <- adap_rej(A,X,Z,sigte,mute)
traceback()
dim(A)
dim(X)
length(sigte)
length(siglb)
tet <- adap_rej(A,X,Z,sigte,mute)
adap_rej<-function(An,Xn,Zn,sig_n,mu)
{
n=1
ot=matrix(0,ncol=nrow(An),nrow=nrow(Xn))
for(j in 1:nrow(Xn))
{
ot[j,] <- arms(runif(nrow(An),-20,20),likhd,function(tet,...) (min(tet) >-20)*(max(tet)<20),n, Z=Zn[,j],A=An,sig=sig_n,X=Xn[j,],mu=mu)[n,]
}
return(ot)
}
likhd<-function(tet,Z,X,sig,A,mu) # Z(d*1) vector; tet(p*1) vector; X(p*1) vector, sig(p*1)vector; A(p*d),mu(p*1)
{
#gam_m<-diag(gam,nrow=length(gam))
sigm <- diag(sig)
res=-(1/2)*t(tet - (A%*%matrix(Z,ncol=1) + mu + X*sig))%*%diag(1/sig)%*%(tet - (A%*%Z + mu + X*sig)) - sum(exp(tet)) ### like lihood minus the exp(-exp(tet)) term
return(res)
}
likhd<-function(tet,Z,X,sig,A,mu) # Z(d*1) vector; tet(p*1) vector; X(p*1) vector, sig(p*1)vector; A(p*d),mu(p*1)
{
#gam_m<-diag(gam,nrow=length(gam))
sigm <- diag(sig)
res=-(1/2)*t(tet - (A%*%matrix(Z,ncol=1) + mu + X*sig))%*%diag(1/sig)%*%(tet - (A%*%Z + mu + X*sig)) - sum(exp(tet)) ### like lihood minus the exp(-exp(tet)) term
return(res)
}
#### rejection ratio
########################################################################################################
## this function uses the arsm
#stop("Lets see what we got! \n " )
adap_rej<-function(An,Xn,Zn,sig_n,mu)
{
n=1
ot=matrix(0,ncol=nrow(An),nrow=nrow(Xn))
for(j in 1:nrow(Xn))
{
ot[j,] <- arms(runif(nrow(An),-20,20),likhd,function(tet,...) (min(tet) >-20)*(max(tet)<20),n, Z=Zn[,j],A=An,sig=sig_n,X=Xn[j,],mu=mu)[n,]
}
return(ot)
}
n=30
p=5
q=10
d=2
al0=1
bet0=1
nu0=1
S0=.1
mute=rep(0,p)
mulb=rep(0,q)
sigte=rep(.5,p)
siglb=rep(.5,q)
tau<-rep(.1,d)
sigte <-rep(.1,p)
siglb <-rep(.1,q)
sigte0 <- .1
siglb0 <- .1
tet=t(A%*%matrix(rnorm(n=n*d),nrow=d)) + matrix(rnorm(n=n*p,sd=sigte[1]),nrow=n)
X=apply(exp(tet),c(1,2),rpois,n=1)
lamb=matrix(rnorm(n=n*q),nrow=n)
lamb=t(B%*%matrix(rnorm(n=n*d),nrow=d)) + matrix(rnorm(n=n*q,sd=siglb[1]),nrow=n)
Y=apply(exp(lamb),c(1,2),rpois,n=1)
Z <-matrix(rnorm(n*d),nrow=d)
## simulate A
triangl <-function(k,d,pam1,pam2) ##pam1=al1,al1 (parameter of the beta), pam2=al,bet parameters of the gamma
{
mat <- matrix(0,nrow=k,ncol=d)
sig <- 1/rgamma(n=d,shape=pam2[1],scale=pam2[2])
for(i in 1:k)
{
for(j in 1:min(i,d))
{
if(j < i)
{ mat[i,j] <- rnorm(n=1,sd=sqrt(sig[j])) }
else
{mat[i,i] <- rtruncnorm(n=1,a=0,mean=0,sd=sqrt(sig[j]))}
}
}
return(mat)
}
A <- triangl(p,d,c(1,1),c(1,1))
B <- triangl(q,d,c(1,1),c(1,1))
##
tau_sim<-NULL
# sigte_sim <-NULL
# siglb<-NULL
# mute <-NULL
# mulb <-NULL
# A_sim <-NULL
# B_sim <-NULL
# Z_sim <-NULL
# tet_sim<-NULL
# lamb_sim<-NULL
out <-list("tau"=NULL,"sigte"=NULL,"siglb"=NULL,"mute"=NULL,"mulb"=NULL,"A"=NULL,"B"=NULL,"Z"=NULL,"tet"=NULL,"lamb"=NULL)
idf=NULL
tau <- apply(matrix(1:ncol(A),ncol=1),1,tauj,al0=al0,bet0=bet0,A=A,B=B)
out$tau=rbind(out$tau,tau)
#sigte <-sigtej(nu0,S0,A,Z,tet,mute)
#sigte <- apply(matrix(1:ncol(tet),ncol=1),1,sigtej,nu0=nu0,S0=S0,A=A,Z=Z,tet=tet,mute=mute)
sigte <- apply(matrix(1:ncol(tet),ncol=1),1,sigtej,nu0=nu0,S0=S0,A=A,Z=Z,tet=tet,mute=mute)
out$sigte=rbind(out$sigte,sigte)
siglb <- siglbj(nu0,S0,B,Z,lamb,mulb)
siglb <- apply(matrix(1:ncol(lamb),ncol=1),1,siglbj,nu0=nu0,S0=S0,B=B,Z=Z,lamb=lamb,mulb=mulb)
out$siglb=rbind(out$siglb,siglb)
mute <- apply(matrix(1:ncol(tet),ncol=1),1,mutej,sigte=sigte,sigte0=sigte0,A=A,Z=Z,tet=tet)
out$mute=rbind(out$mute,mute)
mulb <- mulbl(siglb,siglb0,A,Z,lamb) ## l=1, ... ,q
mulb <-apply(matrix(1:ncol(lamb),ncol=1),1,mulbl,siglb=siglb,siglb0=siglb0,B=B,Z=Z,lamb=lamb)
out$mulb=rbind(out$mulb,mulb)
Z <- apply(matrix(1:nrow(tet),ncol=1),1,Zi,sigte=sigte,siglb=siglb,tet=tet,lamb=lamb,A=A,B=B,mute=mute,mulb=mulb)
out$Z <- rbind(out$Z,as.vector(Z))
ida <- matrix(cbind(rep(1:nrow(A),each=ncol(A)), rep(c(1:ncol(A)),nrow(A))),ncol=2)
A<-matrix(apply(ida,1,ajl,sigte=sigte,mute=mute,A=A,Z=Z,tet=tet,tau=tau),ncol=ncol(A),byrow=T)
A
out$A=rbind(out$A,as.vector(A))
idb <- matrix(cbind(rep(1:nrow(B),each=ncol(B)), rep(c(1:ncol(B)),nrow(B))),ncol=2)
B <- matrix(apply(idb,1,bkl,siglb=siglb,mulb=mulb,B=B,Z=Z,lamb=lamb,tau=tau),ncol=ncol(B),byrow=T)
out$B=rbind(out$B,as.vector(B))
tet <- adap_rej(A,X,Z,sigte,mute)
tet <- adap_rej(An=A,Xn=X,Zn=Z,sig_n=sigte,mu=mute)
adap_rej<-function(An,Xn,Zn,sig_n,mu)
{
ot=matrix(0,ncol=nrow(An),nrow=nrow(Xn))
for(j in 1:nrow(Xn))
{
ot[j,] <- arms(runif(nrow(An),-20,20),likhd,function(tet,...) (min(tet) >-20)*(max(tet)<20),n, Z=Zn[,j],A=An,sig=sig_n,X=Xn[j,],mu=mu)[1,]
}
return(ot)
}
tet <- adap_rej(An=A,Xn=X,Zn=Z,sig_n=sigte,mu=mute)
tet[1,]
adap_rej<-function(An,Xn,Zn,sig_n,mu)
{
ot=matrix(0,ncol=nrow(An),nrow=nrow(Xn))
for(j in 1:nrow(Xn))
{
ot[j,] <- arms(runif(nrow(An),-30,30),likhd,function(tet,...) (min(tet) >-30)*(max(tet)<30),n, Z=Zn[,j],A=An,sig=sig_n,X=Xn[j,],mu=mu)[1,]
}
return(ot)
}
tet <- adap_rej(An=A,Xn=X,Zn=Z,sig_n=sigte,mu=mute)
lamb <- adap_rej(An=B,Xn=Y,Zn=Z,sig_n=siglb,mu=mulb)
out$lamb=rbind(out$lamb,as.vector(lamb))
out$tet=rbind(out$tet,as.vector(tet))
out <-list("tau"=NULL,"sigte"=NULL,"siglb"=NULL,"mute"=NULL,"mulb"=NULL,"A"=NULL,"B"=NULL,"Z"=NULL,"tet"=NULL,"lamb"=NULL)
idf=NULL
for(i in 1:100)
{
idf <- c(idf,i)
#tau <- tauj(al0,bet0,A,B)
tau <- apply(matrix(1:ncol(A),ncol=1),1,tauj,al0=al0,bet0=bet0,A=A,B=B)
out$tau=rbind(out$tau,tau)
#sigte <-sigtej(nu0,S0,A,Z,tet,mute)
#sigte <- apply(matrix(1:ncol(tet),ncol=1),1,sigtej,nu0=nu0,S0=S0,A=A,Z=Z,tet=tet,mute=mute)
sigte <- apply(matrix(1:ncol(tet),ncol=1),1,sigtej,nu0=nu0,S0=S0,A=A,Z=Z,tet=tet,mute=mute)
out$sigte=rbind(out$sigte,sigte)
#siglb <- siglbj(nu0,S0,B,Z,lamb,mulb)
siglb <- apply(matrix(1:ncol(lamb),ncol=1),1,siglbj,nu0=nu0,S0=S0,B=B,Z=Z,lamb=lamb,mulb=mulb)
out$siglb=rbind(out$siglb,siglb)
#mute <- mutej(sigte,sigte0,A,Z,tet)
mute <- apply(matrix(1:ncol(tet),ncol=1),1,mutej,sigte=sigte,sigte0=sigte0,A=A,Z=Z,tet=tet)
out$mute=rbind(out$mute,mute)
#mulb <- mulbl(siglb,siglb0,A,Z,lamb) ## l=1, ... ,q
mulb <-apply(matrix(1:ncol(lamb),ncol=1),1,mulbl,siglb=siglb,siglb0=siglb0,B=B,Z=Z,lamb=lamb)
out$mulb=rbind(out$mulb,mulb)
#Z<-Zi(sigte,siglb,tet,lamb,A,B,mute,mulb)
Z <- apply(matrix(1:nrow(tet),ncol=1),1,Zi,sigte=sigte,siglb=siglb,tet=tet,lamb=lamb,A=A,B=B,mute=mute,mulb=mulb)
out$Z <- rbind(out$Z,as.vector(Z))
# for(l in 1:d)
# {
# for(j in l:p)
# {A[j,l] <- ajl(sigte,mute,A,Z,tet,tau,j,l)}
# for(k in l:q)
# {B[k,l] <- bkl(siglb,mulb,B,Z,lamb,tau,k,l)}
# }
ida <- matrix(cbind(rep(1:nrow(A),each=ncol(A)), rep(c(1:ncol(A)),nrow(A))),ncol=2)
A<-matrix(apply(ida,1,ajl,sigte=sigte,mute=mute,A=A,Z=Z,tet=tet,tau=tau),ncol=ncol(A),byrow=T)
out$A=rbind(out$A,as.vector(A))
idb <- matrix(cbind(rep(1:nrow(B),each=ncol(B)), rep(c(1:ncol(B)),nrow(B))),ncol=2)
B <- matrix(apply(idb,1,bkl,siglb=siglb,mulb=mulb,B=B,Z=Z,lamb=lamb,tau=tau),ncol=ncol(B),byrow=T)
out$B=rbind(out$B,as.vector(B))
tet <- adap_rej(An=A,Xn=X,Zn=Z,sig_n=sigte,mu=mute)
out$tet=rbind(out$tet,as.vector(tet))
lamb <- adap_rej(An=B,Xn=Y,Zn=Z,sig_n=siglb,mu=mulb)
out$lamb=rbind(out$lamb,as.vector(lamb))
#cp <- cp+1
#if(cp > 100) {break}
}
i
traceback()
?mcmc
?traceplot
traceplot(mcmc(out$tau[,1]))
traceplot(mcmc(out$tau))
traceplot(mcmc(out$tet[,1]))
traceplot(mcmc(out$tA[,1]))
traceplot(mcmc(out$A[,1]))
