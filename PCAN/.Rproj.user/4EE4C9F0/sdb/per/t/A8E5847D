{
    "contents" : "### Test code\n#####################\nrequire(\"far\")\nlibrary(\"truncnorm\")\nrequire(\"MCMCpack\")\nlibrary(\"dlm\")\nlibrary(\"mvtnorm\")\nn=30\np=5\nq=10\nd=2\nal0=1\nbet0=1\nnu0=1\nS0=.1\nmute=rep(0,p)\nmulb=rep(0,q)\nsigte=rep(.5,p)\nsiglb=rep(.5,q)\ntau<-rep(.1,d)\nsigte <-rep(.1,p)\nsiglb <-rep(.1,q)\nsigte0 <- .1\nsiglb0 <- .1\ntet=t(A%*%matrix(rnorm(n=n*d),nrow=d)) + matrix(rnorm(n=n*p,sd=sigte[1]),nrow=n)\nX=apply(exp(tet),c(1,2),rpois,n=1)\nlamb=matrix(rnorm(n=n*q),nrow=n)\nlamb=t(B%*%matrix(rnorm(n=n*d),nrow=d)) + matrix(rnorm(n=n*q,sd=siglb[1]),nrow=n)\nY=apply(exp(lamb),c(1,2),rpois,n=1)\nZ <-matrix(rnorm(n*d),nrow=d)\n## simulate A\ntriangl <-function(k,d,pam1,pam2) ##pam1=al1,al1 (parameter of the beta), pam2=al,bet parameters of the gamma\n{\n  mat <- matrix(0,nrow=k,ncol=d)\n  sig <- 1/rgamma(n=d,shape=pam2[1],scale=pam2[2]) \n  for(i in 1:k)\n  {\n    for(j in 1:min(i,d)) \n    {\n      if(j < i)  \n      { mat[i,j] <- rnorm(n=1,sd=sqrt(sig[j])) }\n      else\n      {mat[i,i] <- rtruncnorm(n=1,a=0,mean=0,sd=sqrt(sig[j]))}   \n    }\n  }\n  return(mat)\n}  \n\nA <- triangl(p,d,c(1,1),c(1,1))\nB <- triangl(q,d,c(1,1),c(1,1))\n\n##\ntau_sim<-NULL\n# sigte_sim <-NULL\n# siglb<-NULL\n# mute <-NULL\n# mulb <-NULL\n# A_sim <-NULL\n# B_sim <-NULL\n# Z_sim <-NULL\n# tet_sim<-NULL\n# lamb_sim<-NULL\nout <-list(\"tau\"=NULL,\"sigte\"=NULL,\"siglb\"=NULL,\"mute\"=NULL,\"mulb\"=NULL,\"A\"=NULL,\"B\"=NULL,\"Z\"=NULL,\"tet\"=NULL,\"lamb\"=NULL)\nidf=NULL\nfor(i in 1:100)\n{\nidf <- c(idf,i)\n#tau <- tauj(al0,bet0,A,B) \ntau <- apply(matrix(1:ncol(A),ncol=1),1,tauj,al0=al0,bet0=bet0,A=A,B=B)\nout$tau=rbind(out$tau,tau)\n\n#sigte <-sigtej(nu0,S0,A,Z,tet,mute)\n#sigte <- apply(matrix(1:ncol(tet),ncol=1),1,sigtej,nu0=nu0,S0=S0,A=A,Z=Z,tet=tet,mute=mute)\nsigte <- apply(matrix(1:ncol(tet),ncol=1),1,sigtej,nu0=nu0,S0=S0,A=A,Z=Z,tet=tet,mute=mute)\nout$sigte=rbind(out$sigte,sigte)\n\n#siglb <- siglbj(nu0,S0,B,Z,lamb,mulb)\nsiglb <- apply(matrix(1:ncol(lamb),ncol=1),1,siglbj,nu0=nu0,S0=S0,B=B,Z=Z,lamb=lamb,mulb=mulb)\nout$siglb=rbind(out$siglb,siglb)\n\n#mute <- mutej(sigte,sigte0,A,Z,tet)\nmute <- apply(matrix(1:ncol(tet),ncol=1),1,mutej,sigte=sigte,sigte0=sigte0,A=A,Z=Z,tet=tet)\nout$mute=rbind(out$mute,mute)\n\n#mulb <- mulbl(siglb,siglb0,A,Z,lamb) ## l=1, ... ,q\nmulb <-apply(matrix(1:ncol(lamb),ncol=1),1,mulbl,siglb=siglb,siglb0=siglb0,B=B,Z=Z,lamb=lamb)\nout$mulb=rbind(out$mulb,mulb)\n\n#Z<-Zi(sigte,siglb,tet,lamb,A,B,mute,mulb)\nZ <- apply(matrix(1:nrow(tet),ncol=1),1,Zi,sigte=sigte,siglb=siglb,tet=tet,lamb=lamb,A=A,B=B,mute=mute,mulb=mulb)\nout$Z <- rbind(out$Z,as.vector(Z))\n# for(l in 1:d)\n# {\n# for(j in l:p)  \n# {A[j,l] <- ajl(sigte,mute,A,Z,tet,tau,j,l)}\n# for(k in l:q)\n# {B[k,l] <- bkl(siglb,mulb,B,Z,lamb,tau,k,l)}\n# }\nida <- matrix(cbind(rep(1:nrow(A),each=ncol(A)), rep(c(1:ncol(A)),nrow(A))),ncol=2)\nA<-matrix(apply(ida,1,ajl,sigte=sigte,mute=mute,A=A,Z=Z,tet=tet,tau=tau),ncol=ncol(A),byrow=T)\nout$A=rbind(out$A,as.vector(A))\n\nidb <- matrix(cbind(rep(1:nrow(B),each=ncol(B)), rep(c(1:ncol(B)),nrow(B))),ncol=2)\nB <- matrix(apply(idb,1,bkl,siglb=siglb,mulb=mulb,B=B,Z=Z,lamb=lamb,tau=tau),ncol=ncol(B),byrow=T)\nout$B=rbind(out$B,as.vector(B))\n\ntet <- adap_rej(An=A,Xn=X,Zn=Z,sig_n=sigte,mu=mute) \nout$tet=rbind(out$tet,as.vector(tet))\n\nlamb <- adap_rej(An=B,Xn=Y,Zn=Z,sig_n=siglb,mu=mulb) \nout$lamb=rbind(out$lamb,as.vector(lamb))\n#cp <- cp+1\n#if(cp > 100) {break}\n}\n\ntraceplot(mcmc(out$A[,1]))\ntraceback()\n##  \n",
    "created" : 1390028409343.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "32|1|46|0|\n65|1|113|0|\n",
    "hash" : "2393200287",
    "id" : "A8E5847D",
    "lastKnownWriteTime" : 1390255224,
    "path" : "~/Desktop/PCAN/mcmc_test_code.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_source"
}