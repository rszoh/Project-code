{
    "contents" : "library(clusterGeneration)\nlibrary(mvtnorm)\n####\n### Small simulation work for the gene network work\n\nn1 = 3 ## number of miRNA\nn2= 3 ## number of mRNA\nn=10 ## sample size\nmat = genPositiveDefMat(6,covMethod=\"unifcorrmat\")\ncov2cor(mat$Sigma)\n## specify a correlation matrix\nmat1=diag(1,nrow=6)\nmat1[1,4:6]=c(.75,.85,.9)\nmat1[1,2]=0\nmat1[3,(4:6)]=runif(n=3,.1,.2)\nmat1[2,(5:6)]=c(.85,.9)\nmat1=mat1 + t(mat1) - diag(1,nrow=6)\nv1<- diag(runif(n=6,1,1.1),nrow=6)\nmatx=v1%*%mat1%*%v1\n\nrWishart(n=1,df=3,Sigma=(1/3)*mat1)\ncov2cor(mat1)\n### simulate data \n\nmm <- rep(10, n1+n2)  ## mean expression values\nconc=rmvnorm(n=n,mean=mm,sigma=mat1)  \ndim(conc)\n\n#### simulate gene expressions\ndat = apply(conc,c(1,2),rpois,n=1)\n\n### discretize the data using the mean per sample\nbin_dat<-NULL\nfor(i in 1:(n1+n2))\n{\nbin_dat=cbind(bin_dat, 1*(dat[,i] > mean(dat[,i])))  \n}\n\n##########################################################################\n##         A small example of COD computation\n##########################################################################\n## Data simulation\np = 50\nn = 100 ## number of sample\nal = .1\nbet = 10000\nlb <- matrix(rgamma(n=n*1,shape=al,scale=bet),ncol=1)\nX =cbind(lb,2*lb) ##\nX=cbind(X,sqrt(lb)) ##\nX=cbind(X,.1*(lb)^2) ##\nX=cbind(X,sqrt(lb)) ##\nfor(i in 1:46)\n{X=cbind(X, log(lb))+1000}\n matplot(lb,X,type=\"l\") \ndim(X)\n###\npar(mfrow=c(2,2))\nplot(X[order(X[,1]),1],X[order(X[,1]),2],type=\"l\",lwd=4,xlab=\"miRNA Conc.\",ylab=\"mRNA Conc.\")\nplot(X[order(X[,1]),1],X[order(X[,1]),3],type=\"l\",lwd=4,xlab=\"miRNA Conc.\",ylab=\"mRNA Conc.\")\nplot(X[order(X[,1]),1],X[order(X[,1]),4],type=\"l\",lwd=4,xlab=\"miRNA Conc. \",ylab=\"mRNA Conc\")\nplot(X[order(X[,1]),1],X[order(X[,1]),8],type=\"l\",lwd=4,xlab=\"miRNA Conc.\",ylab=\"mRNA Conc.\")\n####\nbina<-function(val)\n{\n  out= (val > mean(val))*1\n  return(out)  \n}\n## histograms\npar(mfrow=c(2,3))\nhist(X[,1])\nhist(X[,2])\nhist(X[,3])\nhist(X[,4])\nhist(X[,5])\nhist(X[,6])\n\npar(mfrow=c(2,3))\nhist(X[1,])\nhist(X[2,])\nhist(X[3,])\nhist(X[4,])\nhist(X[5,])\nhist(X[6,])\n\n##\nY = sapply(lb,rpois,n=1) \nX_bin = apply(X,MARGIN=2,FUN=bina)\ncolMeans(X_bin)\nY_bin = bina(Y)\nmean(Y_bin==0)\n### Compute the COD estimates\nX=X_bin\nY=Y_bin\ncod_comp <- function(idx,Xb,Yb)\n#cod_comp <- function(a,b,Xb,Yb)\n{\n  id=c(idx[1],idx[2]) \n  #id=c(a,b)\n  X_vl<- Xb[,id]\n  c0=mean(Yb==0)\n  eps0= min(c(c0,1-c0))\n  xc=pmin(X_vl[,1],X_vl[,2])\n  v=c(length(xc[Yb==1 & xc==0]),length(xc[Yb==1 & xc==1]))\n  u=c(length(xc[Yb==0 & xc==0]),length(xc[Yb==0 & xc==1]))\n  eps1= sum(pmin(u/length(Yb), v/length(Yb))) \n  out = ((eps0 - eps1)/eps0)\n  return(out)\n}\n\n### \nidx=t(combn(p,2)) ## generate all combinaison of 2 elements from p el.\nhead(idx)\ncods <- apply(X=idx,MARGIN=1,FUN=cod_comp,Xb=X_bin,Yb=Y_bin)\n#cods <- mapply(FUN=cod_comp,a=idx[,1],b=idx[,2],Xb=X_bin,Yb=Y_bin)\n\n#quartz()\npar(mfrow=c(1,1),cex.axis=1.2,cex=1.2,font.axis=2,font=2)\ntruehist(cods,xlab=\"CoD Values\",ylab=\"Densities\")\n###\nhist(Y)\nmean(Y)\nplot(rowMeans(lb),lb[,2])\n\ncor(rowMeans(lb),lb[,2])\n\n## Turn obs into binary values\n\n\nX_bin = apply(X,MARGIN=2,FUN=bina)\nY_bin = bina(Y)\n\nhist(Y)\nmean(Y)\nmean(Y_bin==0)\n\n### Compute the COD estimates\nX=X_bin\nY=Y_bin\ncod_comp <- function(idx,Xb,Yb)\n{\nid=c(idx[1],idx[2])  \nX_vl<- Xb[,id]\nc0=mean(Yb==0)\neps0= min(c(c0,1-c0))\nxc=pmin(X_vl[,1],X_vl[,2])\nv=c(length(xc[Yb==1 & xc==0]),length(xc[Yb==1 & xc==1]))\nu=c(length(xc[Yb==0 & xc==0]),length(xc[Yb==0 & xc==1]))\neps1= sum(pmin(u/length(Yb), v/length(Yb))) \nout = ((eps0 - eps1)/eps0)\nreturn(out)\n}\n###\n## \nidx=t(combn(p,2)) ## generate all combinaison of n elements from m el.\nhead(idx)\ncods <- apply(X=idx,MARGIN=1,FUN=cod_comp,Xb=X_bin,Yb=Y_bin)\nhist(cods)\n#*********************************************************************************************\n##########################################################################********************\nset.seed(20122)\nG = 100 ## number of genes\nn = 50 ## sample size\nmu = rgamma(G, shape=10, scale=1)  ## expected normalized counts for each gene\nmu = 50 + rnorm(n=G) #rgamma(G, shape=10, scale=.1)\nal = rgamma(G,shape=10,scale=1)    ## dispersion param. per gene across samples\nSiz = runif(n,.1,3)                ##library size factor  \n\n## compute the mean expression for each genes per samples\nmn_al <- as.matrix(mu%o%Siz) \n#matplot(t(mn_al))\n\n## Simulate expression data\nset.seed(20122)\ndat <- matrix(mapply(rnegbin,mu=as.vector(mn_al),theta=1/rep(al,100),n=1),nrow=G,byrow=F)\nhead(dat[,1:5])\n\n### Simulate miRNA data\nlibrary(MASS)\nset.seed(20122)\nmiRNA <- rnegbin(n=n,mu=(100 - .1*mn_al[1,]),theta=.1)\nmu_mirna = 100 - .1*mn_al[1,]\nmatplot(matrix(mu_mirna,ncol=1),t(mn_al),type=\"l\",xlab=\"Expected Counts (miRNA)\",ylab=\"Expected Counts (mRNA)\")\n\n#plot(mn_al[1,], 100 - .1*mn_al[1,] )\n### binarized data\nbina<-function(val)\n{\n  out= (val > mean(val))*1\n  return(out)  \n}\n\n###\ndat_bin <- t(apply(dat,MARGIN=1,FUN=bina))\nrowMeans(dat_bin)\nmiRNA_bin <- bina(miRNA)\nmean(miRNA_bin)\n\n## compute the CoD\n\ncod_comp <- function(idx,Xb,Yb)\n{\n  id=c(idx[1],idx[2])  \n  X_vl<- Xb[,id]\n  c0=mean(Yb==0)\n  eps0= min(c(c0,1-c0))\n  xc=pmin(X_vl[,1],X_vl[,2])\n  v=c(length(xc[Yb==1 & xc==0]),length(xc[Yb==1 & xc==1]))\n  u=c(length(xc[Yb==0 & xc==0]),length(xc[Yb==0 & xc==1]))\n  eps1= sum(pmin(u/length(Yb), v/length(Yb))) \n  out = ((eps0 - eps1)/eps0)\n  return(out)\n}\n\nidx=t(combn(G,2)) ## generate all combinaison of 2 elements from p el.\nhead(idx)\ncods <- apply(X=idx,MARGIN=1,FUN=cod_comp,Xb=t(dat_bin),Yb = miRNA_bin)\npar(mfrow=c(1,1),cex.axis=1.2,cex=1.2,font.axis=2,font=2)\ntruehist(cods,xlab=\"CoD Values\",ylab=\"Densities\")\n#### anothe approach to computing\n\ncod_comp <- function(id1,id2,Xb,Yb)\n{\n  id=c(id1,id2)\n  X_vl<- as.matrix(Xb)[,id]\n  c0=mean(Yb==0)\n  eps0= min(c(c0,1-c0))\n  xc=pmin(X_vl[,1],X_vl[,2])\n  v=c(length(xc[Yb==1 & xc==0]),length(xc[Yb==1 & xc==1]))\n  u=c(length(xc[Yb==0 & xc==0]),length(xc[Yb==0 & xc==1]))\n  eps1= sum(pmin(u/length(Yb), v/length(Yb))) \n  out = ((eps0 - eps1)/eps0)\n  return(out)\n}\n\ndat_bin <- apply(dat,MARGIN=1,FUN=bina)\nmiRNA_bin <- bina(miRNA)\nidx=t(combn(G,2)) ## generate all combinaison of 2 elements from p el.\ncods <- mapply(FUN=cod_comp,id1=idx[,1],id2=idx[,2],Xb=dat_bin,Yb=miRNA_bin)\n\n#quartz()\npar(mfrow=c(1,1),cex.axis=1.2,cex=1.2,font.axis=2,font=2)\ntruehist(cods,xlab=\"CoD Values\",ylab=\"Densities\")\n\n#################################################################################################\n#################################################################################################\n#################################################################################################\n## model based approach\nset.seed(20122)\nG = 100 ## number of genes\nn = 50 ## sample size\nmu = rgamma(G, shape=10, scale=1)  ## expected normalized counts for each gene\nmu = c(100 + rnorm(n=G/2),  50 + rnorm(n=G/2)) #rgamma(G, shape=10, scale=.1)\n#al = rgamma(G,shape=10,scale=1)    ## dispersion param. per gene across samples\nal = 1/rgamma(G,shape=.6,scale=.6)\n#al<- 1/0.14343\n#al<- 1/0.64343\nSiz = runif(n,.1,3)                ##library size factor  \n#Siz=rep(1,n)\n## compute the mean expression for each genes per samples\nmn_al <- as.matrix(mu%o%Siz) \n#matplot(t(mn_al))\n## Simulate expression data\nset.seed(20122)\ndat <- matrix(mapply(rnegbin,mu=as.vector(mn_al),theta=al,n=1),nrow=G,byrow=F)\ndim(dat)\nhead(dat[,1:5])\n\n### Simulate miRNA data\nlibrary(MASS)\nset.seed(20122)\nmiRNA <- rnegbin(n=n,mu=(200 - (.1*mn_al[1,] + .1*mn_al[26,])),theta=al[10])\nmu_mirna = 200 - (.1*mn_al[1,] + .1*mn_al[26,])\nmatplot(matrix(mu_mirna,ncol=1),t(mn_al),type=\"l\",xlab=\"Expected Counts (miRNA)\",ylab=\"Expected Counts (mRNA)\")\n#plot(mn_al[1,], 100 - .1*mn_al[1,] )\n\n### Fit a NB model to the data\ndatnw=as.matrix(rbind(as.vector(miRNA),dat))\nrownames(datnw) <- c(\"mirna\",paste(\"Gene\",1:G,sep=\"\"))\nd <- DGEList(datnw)\n## Design matrix\ngrp <- factor(rep(1:2,each=n/2))\ndesign <- model.matrix(~0 + grp,data=d$samples)\n# Normalize\nd <- calcNormFactors(d)\n\n## Estimates dispersion\nd <- estimateGLMCommonDisp(d, design, verbose=TRUE)\n#d <- estimateTagwiseDisp(d) \nd <- estimateGLMTagwiseDisp(d)\nplotBCV(d,cex=.4)\n# Fit the NB GLMs\nfit <- glmFit(d, design, dispersion=d$common.dispersion)\nfit <- glmFit(d, design, dispersion=d$common.dispersion)\n\n### binarized data\nbina<-function(val)\n{\n  out= (val > mean(val))*1\n  return(out)  \n}\n\n###\ndat_bin <- t(apply(fit$fitted.values,MARGIN=1,FUN=bina))\nhead(rowMeans(dat_bin))\n#miRNA_bin <- bina(miRNA)\n#mean(miRNA_bin)\n\n## compute the CoD\ncod_comp <- function(idx,Xb,Yb)\n{\n  id=c(idx[1],idx[2])  \n  X_vl<- Xb[,id]\n  c0=mean(Yb==0)\n  eps0= min(c(c0,1-c0))\n  xc=pmin(X_vl[,1],X_vl[,2])\n  v=c(length(xc[Yb==1 & xc==0]),length(xc[Yb==1 & xc==1]))\n  u=c(length(xc[Yb==0 & xc==0]),length(xc[Yb==0 & xc==1]))\n  eps1= sum(pmin(u/length(Yb), v/length(Yb))) \n  out = ((eps0 - eps1)/eps0)\n  return(out)\n}\n\nidx=t(combn(G,2)) ## generate all combinaison of 2 elements from p el.\nhead(idx)\ncods <- apply(X=idx,MARGIN=1,FUN=cod_comp,Xb=t(dat_bin[-1,]),Yb = dat_bin[1,])\npar(mfrow=c(1,1),cex.axis=1.2,cex=1.2,font.axis=2,font=2)\ntruehist(cods,xlab=\"CoD Values\",ylab=\"Densities\")\n#### anothe approach to computing\n\ncod_comp <- function(id1,id2,Xb,Yb)\n{\n  id=c(id1,id2)\n  X_vl<- as.matrix(Xb)[,id]\n  c0=mean(Yb==0)\n  eps0= min(c(c0,1-c0))\n  xc=pmin(X_vl[,1],X_vl[,2])\n  v=c(length(xc[Yb==1 & xc==0]),length(xc[Yb==1 & xc==1]))\n  u=c(length(xc[Yb==0 & xc==0]),length(xc[Yb==0 & xc==1]))\n  eps1= sum(pmin(u/length(Yb), v/length(Yb))) \n  out = ((eps0 - eps1)/eps0)\n  return(out)\n}\n\ndat_bin <- apply(dat,MARGIN=1,FUN=bina)\nmiRNA_bin <- bina(miRNA)\nidx=t(combn(G,2)) ## generate all combinaison of 2 elements from p el.\ncods <- mapply(FUN=cod_comp,id1=idx[,1],id2=idx[,2],Xb=dat_bin,Yb=miRNA_bin)\n\n#quartz()\npar(mfrow=c(1,1),cex.axis=1.2,cex=1.2,font.axis=2,font=2)\ntruehist(cods,xlab=\"CoD Values\",ylab=\"Densities\")\n",
    "created" : 1389676519730.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4041648831",
    "id" : "3CCD151",
    "lastKnownWriteTime" : 1384474342,
    "path" : "~/Desktop/Code_ivan.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}